Revision history for Perl extension Apache::CIPP.

0.13  Tu  Mar  7 2000
	- internal subroutine names include now Apache server
	  name and port to prevent from name clasing with several
	  projects on the same instance

0.12  Su  Mar 26 2000
	- added Remote-IP / Proxy X-Forwarded-For mangling,
	  for a dual Apache (thin Proxy/thick Perl) setup,
	  to determine the original remote IP adress in
	  the Perl Apache instance

0.11  Mo  Mar 06 2000
	- added lib/CIPP/Apache.pm, so CPAN will list this
          module in the by-modules/CIPP folder

0.10  Fri Oct 01 1999
	- added configuration parameter for CIPP multilanguage
	  support
	- added more documentation 

0.09  Fri Feb 26 1999
	- some code cosmetics to suppress perl warnings in -w mode

0.08  Tue Feb 16 1999
	- explicit perl syntax check via 'perl -c' inserted again
	  (this IS necessary, because use strict errors are NOT
	   catched via eval. I applied a workaround to the SuSE 6.0
	   crash: removing the whole environment before calling
	   'perl-c')

0.07  Tue Jan 26 1999
	- explicit perl syntax check via 'perl -c' removed
	  (this was unnecessary because errors are catched via eval,
	   also this crashed on SuSE 6.0 Linux systems)

0.06  Sun Jan 04 1999
	- debug flag in access.conf

0.05  Sun Dec 14 1998
        - cache is now splitted into subdirectories
        - names of subroutines and cache files are now really
          unique
        - basic support for the HEAD request method
        - if the CIPP program uses <?AUTOPRINT OFF> no HTTP headers
          will be generated by CIPP_Handler. This is then up to the
          CIPP Program.

0.04  Thu Dec  3 1998
	- minor change of the CIPP constructor needs minor change here

0.03  Sun Nov 15 1998
	- cache-directory will be created if it not exists

0.02  Sun Oct 25 1998
	- full integration of the CIPP.pm Module for preprocessing
	- cache handles now 1:n dependencies
	- error handling improved

0.01  Sat Oct 10 1998
	- original version; created by h2xs 1.18
	- file- and subroutine-caching
	- pseudo-preprocessing to test the cache mechanisms
	- simple output of the .cipp files, no really preprocessing yet,
	  no use of the CIPP preprocessor
	- simple handling of preprocessor- and perl-compiler errors

